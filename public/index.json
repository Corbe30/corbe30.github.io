[{"content":"In React, you can use combination of Context and custom hooks to implement async modals. Async modals let you capture the response from modal asynchronously, saving the hassle of managing another state and improves readibility.\nLet\u0026rsquo;s try to build it from the ground up:\n1. Bare bones App.js function App() { const [isModalOpen, setIsModalOpen] = useState(false); const onResponseClick = (response) =\u0026gt; { setIsModalOpen(false); console.log(response); }; return ( \u0026lt;div\u0026gt; {isModalOpen \u0026amp;\u0026amp; \u0026lt;Modal onResponseClick={onResponseClick} /\u0026gt;} \u0026lt;button onClick={() =\u0026gt; { setIsModalOpen(true); }} \u0026gt; Open Modal \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } To get the response (yes/no) from the modal, App component is forced to manage isModalOpen state and include \u0026lt;Modal /\u0026gt; component in its JSX. We know there is a better way to manage this by using Context.\n2. Context for consolidation Context can help us manage isModalOpen state and Modal component. But notice that the control for handling response moves to ModalContext.\nApp.js function App() { const modalCtx = useContext(ModalContext); return ( \u0026lt;div\u0026gt; \u0026lt;button onClick={() =\u0026gt; {modalCtx.setIsModalOpen(true)}}\u0026gt; Open Modal \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } ModalContext.js export const ModalContext = createContext(); export const ModalProvider = ({ children }) =\u0026gt; { const [isModalOpen, setIsModalOpen] = useState(false); const onResponseClick = (response) =\u0026gt; { setIsModalOpen(false); console.log(response); }; return ( \u0026lt;ModalContext.Provider value={{ setIsModalOpen }}\u0026gt; {isModalOpen \u0026amp;\u0026amp; \u0026lt;Modal onResponseClick={onResponseClick} /\u0026gt;} {children} \u0026lt;/ModalContext.Provider\u0026gt; ); }; To solve this, ModalContext can maintain another state response which will be observed by an useEffect in App component. Even so, the new response might be same as the previous, so we will need a responseKey which will be unique for every response.\nThis seems like a hassle:\nwe don\u0026rsquo;t want App to deal with context but want App to have control over response A custom hook will help us do both.\n3. Introducing useAsyncModal We create useAsyncModal hook, which will lie between ModalContext and App. It will manage context, and provide App component with a method to get response. useAsyncModal creates a promise, which is only resolved when the user clicks on either of the modal buttons.\nApp.js function App() { const { confirm } = useModal(); const onClickHandler = async () =\u0026gt; { const response = await confirm(); console.log(response); }; return ( \u0026lt;div\u0026gt; \u0026lt;button onClick={onClickHandler}\u0026gt;Open Modal\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } useAsyncModal.js const useAsyncModal = () =\u0026gt; { const modalCtx = useContext(ModalContext); const confirm = async () =\u0026gt; { modalCtx.setIsModalOpen(true); const response = await modalCtx.forUserToConfirm(); return response; }; return { confirm }; }; ModalContext.js export const ModalContext = createContext(); export const ModalProvider = ({ children }) =\u0026gt; { const [settlePromise, setSettlePromise] = useState({}); const [isModalOpen, setIsModalOpen] = useState(false); const onResponseClick = (val) =\u0026gt; { setIsModalOpen(false); settlePromise.resolve(val); }; const forUserToConfirm = () =\u0026gt; { const confirmPromise = new Promise((resolve, reject) =\u0026gt; { setSettlePromise({ resolve, reject }); }); return confirmPromise; }; return ( \u0026lt;ModalContext.Provider value={{ setIsModalOpen, forUserToConfirm }}\u0026gt; {isModalOpen \u0026amp;\u0026amp; \u0026lt;Modal onResponseClick={onResponseClick} /\u0026gt;} {children} \u0026lt;/ModalContext.Provider\u0026gt; ); }; This Modal can now be used by any component, all while improving the code readability! You can view the code at my Github repo. It contains 3 branches, one for each step of this article.\n","permalink":"https://corbe30.github.io/posts/async-modals/","summary":"\u003cp\u003eIn React, you can use combination of Context and custom hooks to implement async modals. Async modals let you capture the response from modal asynchronously, saving the hassle of managing another state and improves readibility.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s try to build it from the ground up:\u003c/p\u003e\n\u003ch2 id=\"1-bare-bones\"\u003e1. Bare bones\u003c/h2\u003e\n\u003cdetails open\u003e\n\u003csummary\u003eApp.js\u003c/summary\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eApp\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eisModalOpen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esetIsModalOpen\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003euseState\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eonResponseClick\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003esetIsModalOpen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eisModalOpen\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eModal\u003c/span\u003e \u003cspan class=\"na\"\u003eonResponseClick\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eonResponseClick\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"na\"\u003eonClick\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"nx\"\u003esetIsModalOpen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003eOpen\u003c/span\u003e \u003cspan class=\"nx\"\u003eModal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/details\u003e\n\u003cp\u003eTo get the response (yes/no) from the modal, App component is forced to manage \u003ccode\u003eisModalOpen\u003c/code\u003e state and include \u003ccode\u003e\u0026lt;Modal /\u0026gt;\u003c/code\u003e component in its JSX. We know there is a better way to manage this by using Context.\u003c/p\u003e","title":"A Bottom-up Approach to Async Modals in React"},{"content":"I revived an archived project and released it as FortuneExcel - a plugin for FortuneSheet to import/export Excel (.xlsx) files.\nInitialization Reviving the project meant fixing the deprecated code and existing bugs. Along with this, I added export feature, toolbar plugin support for fortune-sheet and set up Github workflow.\nModularization While implementing a package, it should have maximum abstraction. User should have to add minimal code to their environment for your package to work, all while having no side-effects on their existing code. A proper code strucrure also makes it easier for others to contribute to your code.\nGithub Workflow Lets breakdown the pubhlish.yml file.\nRun the workflow whenever a release is published or manually triggered from Actions tab:\npublish.yml ----------- on: release: types: [published] workflow_dispatch: Define premissions required by the workflow:\npermissions: contents: read pages: write id-token: write Checkout the code, setup node environment, install dependencies (see npm i vs npm ci) and publish the package on npm:\n- uses: actions/checkout@v3 - uses: actions/setup-node@v3 with: node-version: \u0026#34;20.x\u0026#34; registry-url: \u0026#34;https://registry.npmjs.org\u0026#34; - run: npm ci - run: npm publish --tag latest --provenance --access public env: NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} Build the Storybook, upload it as an artifact and deploy it on GitHub Pages:\nNote: Update Build and Deployement source to \u0026lsquo;Github Actions\u0026rsquo; in repo \u0026gt; Settings \u0026gt; Pages\n- run: npm run build-storybook - uses: actions/upload-pages-artifact@v2 with: path: storybook-static - id: deploy uses: actions/deploy-pages@v3 with: token: ${{ github.token }} Secrets and Tokens In the above section inside publish.yml, notice github.token and secrets.NPM_TOKEN.\nWhile github.token is automatically provided by GitHub Actions, secrets.NPM_TOKEN is an automation access token that has to be generated at npmjs.com and set as repository secret on Github.\nEmitted Javascript version Fortune-excel and fortune-sheet were having incompatibility issues due to different transmitted JS when compiled from TS. This is defined by the target value in compilerOptions of tsconfig.json. Since fortune-sheet compiles the JS In es5, changing the target from es6 to es5 in fortune-excel fixed the issue:\n// tsconfig.json { \u0026#34;compilerOptions\u0026#34;: { \u0026#34;target\u0026#34;: \u0026#34;es5\u0026#34;, ... } } Commonjs entrypoint After publishing the package, Yarn showed this warning - \u0026lsquo;the package doesn\u0026rsquo;t seem to have a commonjs entry point\u0026rsquo;. Compiling the TS in commonjs is necessary for old projects still using CJS instead of ESM. Compiling is ESM is optional since EMS supports CJS, but not visa-versa. To fix the warning:\nMake sure package.json does not have \u0026quot;type\u0026quot;: \u0026quot;module\u0026quot; defined When set to \u0026ldquo;module\u0026rdquo;, the type field allows a package to specify all .js files within are ES modules. If the \u0026ldquo;type\u0026rdquo; field is omitted or set to \u0026ldquo;commonjs\u0026rdquo;, all .js files are treated as CommonJS.\nDefine \u0026quot;module\u0026quot;: \u0026quot;commonjs\u0026quot; in tsconfig.json - refer to this. Compiling TS for Storybook To make our plugin work with Storybook in the same repository, we can take two approaches:\nUsing Compiled JavaScript (CommonJS from /dist/) Using TypeScript Source Directly Using TS source directly enables seamless debugging in browsers, but it will require additional configuration. To leverage your TypeScript source directly within Storybook:\nConfigure TypeScript Path Aliases: Modify your tsconfig.json to create a path alias for your plugin\u0026rsquo;s entry point. This allows Storybook to resolve the import correctly.\n// tsconfig.json { \u0026#34;paths\u0026#34;: { \u0026#34;@corbe30/fortune-excel\u0026#34;: [\u0026#34;./src/main.ts\u0026#34;], }, ... } // stories/Page.tsx import { exportToolBarItem, importToolBarItem, } from \u0026#34;@corbe30/fortune-excel\u0026#34;; Configure Babel for TypeScript Support: Storybook uses Babel for its build process. To enable TypeScript compilation, you need to add the @babel/preset-typescript preset to your Babel configuration (babel.config.js or .babelrc).\n// babel.config.js module.exports = { presets: [ \u0026#34;@babel/preset-env\u0026#34;, \u0026#34;@babel/preset-react\u0026#34;, \u0026#34;@babel/preset-typescript\u0026#34; ], ... }; Install Babel Presets: Ensure you have the necessary Babel presets installed as development dependencies.\nnpm install --save-dev @babel/preset-env @babel/preset-react @babel/preset-typescript ","permalink":"https://corbe30.github.io/posts/lessons-from-fortuneexcel/","summary":"\u003cp\u003eI revived an archived project and released it as \u003ca href=\"http://npmjs.com/package/@corbe30/fortune-excel\"\u003eFortuneExcel\u003c/a\u003e - a plugin for FortuneSheet to import/export Excel (.xlsx) files.\u003c/p\u003e\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd  valign=\"top\"\u003e\u003cimg src=\"https://img.shields.io/npm/v/@corbe30/fortune-excel\" /\u003e\u003c/td\u003e\n    \u003ctd  valign=\"top\"\u003e\u003cimg src=\"https://img.shields.io/npm/d18m/%40corbe30%2Ffortune-excel\" /\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/table\u003e\n\u003ch2 id=\"initialization\"\u003eInitialization\u003c/h2\u003e\n\u003cp\u003eReviving the project meant fixing the deprecated code and existing bugs. Along with this, I added export feature, toolbar plugin support for fortune-sheet and set up Github workflow.\u003c/p\u003e\n\u003ch2 id=\"modularization\"\u003eModularization\u003c/h2\u003e\n\u003cp\u003eWhile implementing a package, it should have maximum abstraction. User should have to add minimal code to their environment for your package to work, all while having no side-effects on their existing code. A proper code strucrure also makes it easier for others to contribute to your code.\u003c/p\u003e","title":"⇧⇩ FortuneExcel - Lessons from my First Package"},{"content":"I\u0026rsquo;ll describe how I derived an algorithm to switch seamlessly between perspective and orthographic views. The solution will be implemented in babylon.js.\nBasics (the why) A camera can be controlled by 3 operations - pan, zoom and orbit. These operations in arcRotateCamera are performed by changing the following properties:\ncamera position (where the camera is at) camera target (where the camera is looking at) More about how it works here.\nConsider using only these two properties to perform the operations. Although pan and orbit changes are reflect in both the views, zoom doesn\u0026rsquo;t seem to have any effect in orthographic view (see why?)\nSo we need a third parameter to control zooming in ortho view - which is visible area. Instead of going back and forth, we make the camera\u0026rsquo;s viewing area larger or smaller. In babylon.js, this is done by modifying ortholeft, orthoright, orthobottom and orthotop properties.\nUsing this solution is fine in orthographic view, but once we try to apply it in perpective view, the edges and corners of your view may appear to bend outwards. Think of it as changing from 1x to 0.5x in your phone\u0026rsquo;s camera. To zoom out, you\u0026rsquo;d rather want to move your phone back, than switch to 0.5x zoom.\nIf you are adamant, in perspective view, fov is used to expand the boundaries. In ortho view, the fov is actually 0.\nSo now, to handle zooming, we need a function which converts ortho-values (for orthographic view) to position (for perspective view) and visa versa.\nAlgorithm (the how) Ortho-values can be modified uniformly wrt length and height ratio using this function:\nconst ratio = canvas.height / canvas.width; camera.orthoLeft = -width; camera.orthoRight = width; camera.orthoTop = camera.orthoRight * ratio; camera.orthoBottom = camera.orthoLeft * ratio; So, we must provide a new width everytime there are changes in camera position in perspective mode. In general:\nnewWidth = ∏(dependencies) * constant We know camera position is one of the dependencies for calculating new width. Plugging it in:\nnew_width = camera.position.length() * ∏(other_dependencies) * constant After playing around by switching camera modes, we can hit-and-try the constant. But there\u0026rsquo;s a catch - this contant depends on Babylon\u0026rsquo;s canvas width. This is the last dependency. My canvas width was 766 when I binary-searched 0.525 as the constant, so we get:\nnew_width = (camera.position.length() * 0.525 * canvas.width) / 766; Add this conversion as an observable and we have successfully implemented seamless switching between orthographic and perspective view.\nconst updateOrthoValues = (camera, width) =\u0026gt; { const ratio = canvas.height / canvas.width; camera.orthoLeft = -width; camera.orthoRight = width; camera.orthoTop = camera.orthoRight * ratio; camera.orthoBottom = camera.orthoLeft * ratio; }; const getDist = (camera) =\u0026gt; { return camera.position.length() * canvas.width * 402.15; }; scene.onBeforeRenderObservable.add(() =\u0026gt; { let newRadius = getDist(camera); if (oldRadius !== newRadius) { updateOrthoValues(camera, newRadius); oldRadius = newRadius; } }); View the final result here (press X to switch between the views): https://playground.babylonjs.com/#P2QHFS#1\n","permalink":"https://corbe30.github.io/posts/view-switching-algo/","summary":"\u003cp\u003eI\u0026rsquo;ll describe how I derived an algorithm to switch seamlessly between perspective and orthographic views. The solution will be implemented in babylon.js.\u003c/p\u003e\n\u003ch2 id=\"basics-the-why\"\u003eBasics (the why)\u003c/h2\u003e\n\u003cp\u003eA camera can be controlled by 3 operations - pan, zoom and orbit.\nThese operations in arcRotateCamera are performed by changing the following properties:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003ecamera position (where the camera is at)\u003c/li\u003e\n\u003cli\u003ecamera target (where the camera is looking at)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eMore about how it works \u003ca href=\"https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#arc-rotate-camera\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eConsider using only these two properties to perform the operations. Although pan and orbit changes are reflect in both the views, zoom doesn\u0026rsquo;t seem to have any effect in orthographic view (see \u003ca href=\"https://blenderartists.org/t/zooming-through-orthographic-cameras-not-working-need-everyones-help-to-fix-this/701450/3\"\u003ewhy?\u003c/a\u003e)\u003c/p\u003e","title":"Seamless View Switching Algorithm for ArcRotateCamera in Babylon.js"}]